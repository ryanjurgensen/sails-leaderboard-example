////////////////////////////////////////////////////////////
// Rigging
////////////////////////////////////////////////////////////

function libPath ( ) {
	return __dirname+"/../node_modules";
}
exports.libPath = libPath;

function ready (config,callback) {

	// Validators for file extensions
	function isJs(filename) {
		return filename.match(/.+\.js$/g);
	}
	function isCss(filename) {
		return filename.match(/.+\.css$/g);
	}
	function isLess(filename) {
		return filename.match(/.+\.less$/g);
	}

	// Grab a list of applicable filenames given a directory name
	function ls(dirPath,filenameValidator,newPathPrefix) {
		var filenames = [];
		try {
			fs.lstatSync(dirPath);
		}
		catch (e) {
			debug.warn("Asset source directory "+dirPath+" does not exist!  Skipping...");
			return [];
		}
		fs.readdirSync(dirPath).forEach(function(filename) {

			// Ignore files that start with an underscore
			if ((filename[0] === '_')) {
				return;
			}
			
			// If this is a directory, recursively examine it
			// TODO

			// If this filename validates, add it to the list
			if (filenameValidator && filenameValidator(filename)) {
				filenames.push(path.join(newPathPrefix || dirPath, filename));
			}
		});
		return filenames;
		
	}

	var isProduction = config.appEnvironment=="production",
	isDevelopment = config.appEnvironment=="development";

	function decorateDependency(filename) {
		if (isDevelopment) {
			return "/mast/lib/dependencies/"+filename+".min.js"
		}
		else {
			return __dirname+'/mast/lib/dependencies/'+filename+'.min.js';
		}
	}

	function decorateCoreFile(filename) {
		if (isDevelopment) {
			return "/mast/lib/"+filename;
		}
		else {
			return __dirname+'/mast/lib/'+filename;
		}
	}
	
	// Find any LESS files and compile them into CSS
	var less = require('less');
	var lessTemplateFiles =	ls(config.appPath+'/mast/templates',isLess,null),
		combinedLessData = "";
	_.each(lessTemplateFiles,function(filepath,index) {
		combinedLessData += fs.readFileSync(filepath,'utf8')+ "\n";
	});
	less.render(combinedLessData,function (err,css) {
		fs.writeFileSync(config.appPath+'/mast/templates/less-output.css',css);
		completePreprocess();
	});
	
	
	// Create lists of source filenames
	function completePreprocess() {
		
		// Determine all of the files that should be compiled
		var jsDependencies		= _.map(["jquery","underscore","underscore.string","backbone","json2","logger","outside","pressFoo"],decorateDependency);
		var jsMastCore			= _.map(["mast.js"],decorateCoreFile);
		var jsMastModules		= _.map(["mixins.js","model.js","socket.js","pattern.js","component.js","tree.js","extend.js"],decorateCoreFile);
		var jsMixinFiles		= ls(config.appPath+'/mast/mixins',isJs,(isDevelopment)?"/mixins":null);
		var jsModelFiles		= ls(config.appPath+'/mast/models',isJs,(isDevelopment)?"/models":null);
		var jsComponentFiles	= ls(config.appPath+'/mast/components',isJs,(isDevelopment)?"/components":null);
		var jsRouteFiles		= ls(config.appPath+'/mast/routes',isJs,(isDevelopment)?"/routes":null);
		var cssTemplateFiles	= ls(config.appPath+'/mast/templates',isCss,(isDevelopment)?"/templates":null);

		// Define the global array of js filenames
		_mastJsFiles = _.union(jsDependencies,jsMastCore,jsMastModules,jsMixinFiles,jsModelFiles,jsComponentFiles,jsRouteFiles);
		_mastCssFiles = cssTemplateFiles;
		
		callback();
	}
	
}

var compiler = require('./compiler.js'),
middleware = require('./middleware.js');
exports.compiler = function(config,callback) {
	if (fs.existsSync(config.appPath+'/mast/templates')) {
		ready(config,function() {
			compiler.compile(config,callback);
		});
	}
	else {
		callback();
	}
}
exports.middleware = function(config,res){
	if (fs.existsSync(config.appPath+'/mast/templates')) {
		ready(config,function() {
			middleware.layout(config,res);
		});
	}
}